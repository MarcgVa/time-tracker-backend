// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  projects     Project[]
  company      Company[]
  profile      Profile?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  refreshToken String[]
  role         Role      @default(USER)
  Invoice      Invoice[]
}

model Company {
  id       String    @id @default(uuid())
  name     String
  phone    String
  address  String
  contact  String
  projects Project[]
  user     User      @relation(fields: [userId], references: [id])
  userId   String
}

model Project {
  id          String      @id @default(uuid())
  name        String
  description String?
  hourlyRate  Float
  user        User        @relation(fields: [userId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  userId      String
  company     Company?    @relation(fields: [companyId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  companyId   String?
  timeEntries TimeEntry[]
  invoices    Invoice[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isCompleted Boolean?    @default(false)
  status      Status      @default(ACTIVE)
  priority    Priority    @default(NORMAL)
}

model TimeEntry {
  id        Int       @id @default(autoincrement())
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String?
  startTime DateTime
  endTime   DateTime?
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoice   String?
  hours     Float     @default(0.0)
}

model Invoice {
  id        String    @id @default(uuid())
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  projectId String?
  total     Float
  issuedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    Status    @default(PENDING)
  user      User      @relation(fields: [userId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  userId    String
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Profile {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?
  phone     String?
  bio       String?
  avatar    String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  DISABLED
}

enum Status {
  ACTIVE
  PENDING
  CLOSED
}

enum Priority {
  URGENT
  HIGH
  NORMAL
  LOW
}
